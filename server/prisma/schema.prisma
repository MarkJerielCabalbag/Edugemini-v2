// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// output   = "../generated/prisma"

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int       @id     @default(autoincrement())
  username    String    
  email       String
  password    String?

  listOfCreatedClassroom Classroom[]

  student                Student?
}

model Student {
  relatedToUser       User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int         @id    
  lastname            String
  firstname           String
  middlename          String
  sex                 String            
  status              ClassroomStatus   @default(PENDING)

  listOfOutputs       Output[]

 

  relatedtoClassroom  Classroom?        @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId              Int?
}

model Classroom {
  id                Int         @id      @default(autoincrement())
  classname         String
  section           String
  subject           String
  room              String
  classcode         String?

  relatedToUser     User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            Int

  listOfAnnouncements Announcement[]
  listOfActivity      Activity[]
  listOfStudents      Student[]
  listOfOutputs       Output[]
}

model Activity {
  id                  Int         @id      @default(autoincrement())
  title               String
  date                String
  time                String
  instruction         String?

  criteria            Files[]
  outputs             Output[]
 
 

  relatedToClassroom  Classroom           @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId              Int
}


model Announcement {
  id                  Int         @id      @default(autoincrement())
  title               String
  description         String?
  relatedToClassroom  Classroom            @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId              Int
  listOfFiles         Files[]
  createdAt           DateTime?            @default(now())
}

enum ClassroomStatus {
  PENDING
  DECLINED
  APPROVED
}

enum OutputStatus {
 PENDING
 SUBMITTED
 LATE
}

model Output {
  id                  Int         @id     @default(autoincrement())
  listOfFiles         Files[]  
  relatedToStudent    Student?            @relation(fields: [studentId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  studentId           Int?
  relatedToClassroom  Classroom?          @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId              Int?
  relatedToActivity   Activity?           @relation(fields: [activityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activityId          Int?
  relatedToFeedback   Feedback?           @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedbackId          Int?
  relatedToScore      Score?              @relation(fields: [scoreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scoreId             Int?
  

    @@unique([roomId, activityId, studentId], name: "roomId_activityId_studentId")
}

model Files {
  id                    Int           @id         @default(autoincrement())
  filename              String        
  mimetype              String
  fileSize              Int
  folderPath            String?
  filePath              String?

  relatedToActivity     Activity?                   @relation(fields: [activityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activityId            Int?

  relatedToAnnouncement Announcement?               @relation(fields: [announceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  announceId            Int?

  relatedToOutput       Output?                     @relation(fields: [outputId], references: [id], onDelete: Cascade, onUpdate: Cascade )
  outputId              Int?
  publicFileUrl         String?

    status              OutputStatus         @default(PENDING) 
}

model Feedback { 
  id                    Int             @id         @default(autoincrement())
  feedback              String?
  output                Output[]
}

model Score {
  id                    Int             @id          @default(autoincrement())
  score                 Int?
  output                Output[]
}